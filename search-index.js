var searchIndex = JSON.parse('{\
"bit_field":{"doc":"Provides the abstraction of a bit field, which allows for …","t":"SIIKKKKKKKKK","n":["BIT_LENGTH","BitArray","BitField","bit_length","get_bit","get_bit","get_bits","get_bits","set_bit","set_bit","set_bits","set_bits"],"q":[[0,"bit_field"],[12,"core::ops::range"]],"d":["The number of bits in this bit field.","","A generic trait which provides methods for extracting and …","Returns the length, eg number of bits, in this bit array.","Obtains the bit at the index <code>bit</code>; note that index 0 is the …","Obtains the bit at the index <code>bit</code>; note that index 0 is the …","Obtains the range of bits specified by <code>range</code>; note that …","Obtains the range of bits specified by <code>range</code>; note that …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the range of bits defined by the range <code>range</code> to the …","Sets the range of bits defined by the range <code>range</code> to the …"],"i":[5,0,0,6,5,6,5,6,5,6,5,6],"f":[0,0,0,[-1,1,[]],[[-1,1],2,[]],[[-1,1],2,[]],[[-1,-2],-1,[],[[3,[1]]]],[[-1,-2],-3,[],[[3,[1]]],[]],[[-1,1,2],-1,[]],[[-1,1,2],4,[]],[[-1,-2,-1],-1,[],[[3,[1]]]],[[-1,-2,-3],4,[],[[3,[1]]],[]]],"c":[],"p":[[15,"usize"],[15,"bool"],[8,"RangeBounds",12],[15,"tuple"],[8,"BitField",0],[8,"BitArray",0]]},\
"bitflags":{"doc":"Generate types for C-style flags with ergonomic APIs.","t":"SCIQSSDILLOKLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLALLLLLLALLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLDIILLLLLLFLLLKFLLLK","n":["ALL","BitFlags","Bits","Bits","EMPTY","FLAGS","Flag","Flags","all","all","bitflags","bits","borrow","borrow_mut","complement","complement","contains","contains","difference","difference","empty","empty","from","from_bits","from_bits","from_bits_retain","from_bits_truncate","from_bits_truncate","from_name","from_name","insert","insert","intersection","intersection","intersects","intersects","into","is_all","is_all","is_empty","is_empty","is_named","is_unnamed","iter","iter","iter","iter_names","iter_names","name","new","parser","remove","remove","set","set","symmetric_difference","symmetric_difference","toggle","toggle","try_from","try_into","type_id","union","union","value","Iter","IterNames","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","into_iter","into_iter","next","next","remaining","try_from","try_from","try_into","try_into","type_id","type_id","ParseError","ParseHex","WriteHex","borrow","borrow_mut","empty_flag","fmt","fmt","from","from_str","into","invalid_hex_flag","invalid_named_flag","parse_hex","to_writer","try_from","try_into","type_id","write_hex"],"q":[[0,"bitflags"],[65,"bitflags::iter"],[86,"bitflags::parser"],[105,"core::marker"],[106,"core::option"],[107,"core::result"],[108,"core::any"],[109,"core::fmt"],[110,"core::fmt"]],"d":["A value with all bits set.","","A bits type that can be used as storage for a flags type.","The underlying bits type.","A value with all bits unset.","The set of defined flags.","A defined flags value that may be named or unnamed.","A set of defined flags using a bits type as storage.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Generate a flags type.","Get the underlying bits value.","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether the flag is named.","Whether the flag is unnamed.","Yield the bits of a source flags value in a set of …","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Get the name of this flag.","Define a flag.","Parsing flags from text.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>Flags::insert</code> when <code>value</code> is <code>true</code> or <code>Flags::remove</code> …","Call <code>Flags::insert</code> when <code>value</code> is <code>true</code> or <code>Flags::remove</code> …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the flags value of this flag.","An iterator over flags values.","An iterator over flags values.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Get a flags value of any remaining bits that haven’t …","","","","","","","An error encountered while parsing flags from text.","Parse a value from a hex string.","Encode a value as a hex string.","","","A hex or named flag wasn’t found between separators.","","","Returns the argument unchanged.","Parse a flags value from text.","Calls <code>U::from(self)</code>.","An invalid hex flag was encountered.","A named flag that doesn’t correspond to any on the flags …","Parse the value from hex.","Write a flags value as text.","","","","Write the value as hex."],"i":[18,0,0,11,18,11,0,0,11,11,0,11,6,6,11,11,11,11,11,11,11,11,6,11,11,11,11,11,11,11,11,11,11,11,11,11,6,11,11,11,11,6,6,0,11,11,11,11,6,6,0,11,11,11,11,11,11,11,11,6,6,6,11,11,6,0,0,7,8,7,8,7,8,7,8,7,8,7,8,8,7,8,7,8,7,8,0,0,0,12,12,12,12,12,12,0,12,12,12,19,0,12,12,12,20],"f":[0,0,0,0,0,0,0,0,[[],-1,[]],[[],-1,[]],0,[-1,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],1,2],[[-1,-1],1,2],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[-1,-1,[]],[[],[[3,[-1]]],[]],[[],[[3,[-1]]],[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[4,[[3,[-1]]],[]],[4,[[3,[-1]]],[]],[[-1,-1],5,2],[[-1,-1],5,2],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],1,2],[[-1,-1],1,2],[-1,-2,[],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[[6,[-1]]],1,[]],[[[6,[-1]]],1,[]],0,[-1,[[7,[-1]]],[]],[-1,[[7,[-1]]],[]],[-1,[[8,[-1]]],[]],[-1,[[8,[-1]]],[]],[[[6,[-1]]],4,[]],[[4,-1],[[6,[-1]]],[]],0,[[-1,-1],5,2],[[-1,-1],5,2],[[-1,-1,1],5,2],[[-1,-1,1],5,2],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],5,2],[[-1,-1],5,2],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[[6,[-1]]],-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[-1]]],3,11],[[[8,[-1]]],3,11],[[[8,[-1]]],-1,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],12],[[12,13],14],[[12,13],14],[-1,-1,[]],[4,[[9,[-1,12]]],11],[-1,-2,[],[]],[-1,12,15],[-1,12,15],[4,[[9,[-1,12]]],2],[[-1,-2],[[9,[5,16]]],11,17],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[[-1,-2],14,[],17]],"c":[],"p":[[15,"bool"],[8,"Sized",105],[4,"Option",106],[15,"str"],[15,"tuple"],[3,"Flag",0],[3,"Iter",65],[3,"IterNames",65],[4,"Result",107],[3,"TypeId",108],[8,"Flags",0],[3,"ParseError",86],[3,"Formatter",109],[6,"Result",109],[8,"Display",109],[3,"Error",109],[8,"Write",109],[8,"Bits",0],[8,"ParseHex",86],[8,"WriteHex",86]]},\
"byte_endian":{"doc":"","t":"DIDLLLLLLLLLLLLLLLLLLKKLLLLLLKLLKLLLLLLLL","n":["BigEndian","Endian","LittleEndian","borrow","borrow","borrow_mut","borrow_mut","clone","clone","default","default","eq","eq","fmt","fmt","from","from","from","from","from","from","from_be","from_le","hash","hash","into","into","new","new","to_be","to_bits","to_bits","to_le","to_native","to_native","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"byte_endian"],[41,"core::fmt"],[42,"core::fmt"],[43,"core::result"],[44,"core::any"]],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Converts <code>value</code> from big endian to the target’s …","Converts <code>value</code> from little endian to the target’s …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Converts <code>self</code> to big endian from the target’s endianness.","","","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> from big endian to the target’s endianness.","Converts <code>self</code> from little endian to the target’s …","","","","","",""],"i":[0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,1,1,2,2,2,7,7,1,2,1,2,1,2,7,1,2,7,1,2,1,2,1,2,1,2],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],[]],[[[2,[-1]]],[[2,[-1]]],[]],[[],[[1,[-1]]],[]],[[],[[2,[-1]]],[]],[[[1,[-1]],[1,[-1]]],3,[]],[[[2,[-1]],[2,[-1]]],3,[]],[[[1,[-1]],4],5,[]],[[[2,[-1]],4],5,[]],[-1,-1,[]],[6,-1,[]],[-1,[[1,[-1]]],7],[-1,[[2,[-1]]],7],[-1,-1,[]],[6,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[1,[-1]],-2],8,[],9],[[[2,[-1]],-2],8,[],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-1]]],7],[-1,[[2,[-1]]],7],[-1,-2,[],[]],[[[1,[-1]]],-1,[]],[[[2,[-1]]],-1,[]],[-1,-2,[],[]],[[[1,[-1]]],-1,[]],[[[2,[-1]]],-1,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]]],"c":[],"p":[[3,"BigEndian",0],[3,"LittleEndian",0],[15,"bool"],[3,"Formatter",41],[6,"Result",41],[15,"never"],[8,"Endian",0],[15,"tuple"],[8,"Hasher",42],[4,"Result",43],[3,"TypeId",44]]},\
"crabnet":{"doc":"","t":"IIQQDIDIIDILLLLLLAALLLLOLLLLKLMALLKLKALLLLLLLLLMKLKLKLDLLFFLLFFLLLLSDNDEESDENNDSNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLMLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLSSDDESSNNLLLLLLLLLLLLLLLLLLLLMLLLLLMLLLLLLLLLLLLLLLLLLLMLLLLLLMLLLMLLLSSSSNNSSSNDDDEEDDNSDNNMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLMM","n":["IntoBoxedBytes","IsSafeToWrite","Output","Output","PacketParser","Parsable","Parsed","Protocol","Stack","Stacked","StackingAnchor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","checksum","data_link","div","from","from","from","impl_stack","into","into","into","into_boxed_bytes","into_boxed_bytes_in","into_boxed_bytes_in","lower","network","new","next","parse","payload","stack","transport","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upper","write_len","write_len","write_stage1","write_stage1","write_stage2","write_stage2","PseudoHeader","borrow","borrow_mut","calculate","calculate_with_len","from","into","make","make_combine","new","try_from","try_into","type_id","ADDR_SIZE","Arp","Arp","ArpAddress","ArpHardwareType","ArpOpcode","BROADCAST","Eth","EthType","Ethernet","Ip","MacAddr","NULL","Reply","Request","Tun","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","default","dest_ip","dest_mac","dest_mac","dest_mac","div","div","div","eq","eq","eq","eq","flags","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hlen","htype","into","into","into","into","into","into","into","into","into_boxed_bytes_in","into_boxed_bytes_in","into_boxed_bytes_in","ip","mac","new","new","new","new","opcode","parse","parse","parse","partial_cmp","plen","ptype","set_dest_mac","set_src_mac","src_ip","src_mac","src_mac","src_mac","stack","stack","stack","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_len","write_len","write_len","write_stage1","write_stage1","write_stage1","write_stage2","write_stage2","write_stage2","ADDR_SIZE","BROADCAST","Ipv4","Ipv4Addr","Ipv4Type","LOOPBACK","NULL","Tcp","Udp","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","dest_ip","div","eq","eq","fmt","fmt","fmt","fmt","frag_offset","from","from","from","from","hash","ident","into","into","into","into_boxed_bytes_in","is_broadcast","is_same_subnet","new","new","octets","parse","partial_cmp","payload_len","protocol","set_src_ip","src_ip","stack","to_owned","to_owned","to_string","tos","try_from","try_from","try_from","try_into","try_into","try_into","ttl","type_id","type_id","type_id","v","write_len","write_stage1","write_stage2","ACK","CWR","ECE","FIN","InvalidSize","MaxSegmentSize","PSH","RST","SYN","SackPermitted","SeqNumber","Tcp","TcpFlags","TcpOption","TcpOptionErr","TcpOptions","TcpOptionsIter","TimeStamp","URG","Udp","UnknownOption","WindowScale","ack_nr","ack_number","add","add","all","as_slice","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checksum","clone","clone","clone","clone_into","clone_into","clone_into","complement","contains","default","dest_port","dest_port","difference","div","div","div","dst_port","empty","eq","eq","eq","extend","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","header_size","insert","intersection","intersects","into","into","into","into","into","into","into","into","into_iter","into_iter","is_all","is_empty","iter","iter","iter_names","new","new","new","next","not","options_size","parse","parse","parse","partial_cmp","remove","seq_nr","sequence_number","set","set_ack_number","set_flags","set_sequence_number","set_window","src_port","src_port","src_port","stack","stack","stack","sub","sub","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","urgent_ptr","window","window","with","write_len","write_len","write_len","write_stage1","write_stage1","write_stage1","write_stage2","write_stage2","write_stage2","kind","size"],"q":[[0,"crabnet"],[54,"crabnet::checksum"],[67,"crabnet::data_link"],[211,"crabnet::network"],[281,"crabnet::transport"],[472,"crabnet::transport::TcpOptionErr"],[474,"alloc::boxed"],[475,"core::alloc"],[476,"core::result"],[477,"core::any"],[478,"core::ptr::non_null"],[479,"core::marker"],[480,"byte_endian"],[481,"core::cmp"],[482,"core::fmt"],[483,"core::fmt"],[484,"core::option"],[485,"alloc::string"],[486,"core::iter::traits::collect"],[487,"bitflags::iter"],[488,"bitflags::iter"]],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the write length in bytes.","","","","","","","","","Compute the internet checksum for <code>value</code>.","Compute the internet checksum for <code>value</code> of <code>size</code>.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Folds the 32-bit sum (<code>sum</code>) to 16 bits in the network byte …","Combine several RFC 1071 compliant checksums.","","","","","","","","","ARP Hardware Type","ARP Opcode","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Length in octets of a hardware address.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Creates a new ARP header,","","","","","","","Length in octets of an internetwork address.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Size of IPv4 adderess in octets.","An IPv4 address representing the broadcast address: …","","","","Loopback address.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if this is a broadcast address (…","Returns <code>true</code> if <code>self</code> and <code>other</code> belong to the same subnet.","Creates a new IPv4 address from four eight-bit octets.","","Returns the four eight-bit integers that make up this …","","","","","","","","","","","","","","","","","","","","","","","","","","Acknowledgment field is significant.","Congestion Window Reduced.","ECN-Echo.","No more data from sender.","The TCP option had an invalid size.","The maximum receive segment size at the TCP endpoint that …","Push Function.","Reset the connection.","Synchronize sequence numbers.","Selective ACKs are permitted.","","","","","","","","The first number is the sender timestamp and the latter is …","Urgent pointer field is significant.","","Unknown TCP option.","","","","","","Get a flags value with all known bits set.","Returns the TCP options as a byte slice.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","","","","The intersection of a source flags value with the …","","","","","Get a flags value with all bits unset.","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Returns the header size in bytes.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","","Yield a set of contained named flags values.","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","","The intersection of a source flags value with the …","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Sets the ACK number to <code>value</code>.","","","","","","","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","",""],"i":[0,0,3,52,0,0,0,0,0,0,0,1,10,8,1,10,8,0,0,1,1,10,8,0,1,10,8,53,53,1,1,0,8,8,52,8,3,0,1,10,8,1,10,8,1,10,8,1,2,1,2,1,2,1,0,20,20,0,0,20,20,0,0,20,20,20,20,21,0,22,0,0,0,21,0,0,23,22,0,21,24,24,0,28,29,26,21,22,31,23,24,28,29,26,21,22,31,23,24,21,22,23,24,21,22,23,24,21,21,26,28,26,28,28,29,26,21,22,31,24,29,21,21,22,31,23,24,28,29,26,21,22,31,23,24,21,26,26,28,29,26,21,22,31,23,24,28,29,26,31,31,28,29,26,31,26,28,29,26,21,26,26,28,28,26,28,26,28,28,29,26,21,22,23,24,21,28,29,26,21,22,31,23,24,28,29,26,21,22,31,23,24,28,29,28,29,26,21,22,31,23,24,28,29,26,28,29,26,28,29,26,27,27,0,0,0,27,27,37,37,27,37,19,27,37,19,27,37,27,37,27,27,19,19,27,37,27,27,37,19,19,27,27,37,19,27,19,27,37,19,19,27,27,27,19,27,19,27,19,19,19,19,19,27,37,27,19,27,37,19,27,37,19,19,27,37,19,19,19,19,19,41,41,41,41,46,43,41,41,41,43,0,0,0,0,0,0,0,43,41,0,46,43,39,39,40,40,41,42,41,41,41,41,41,41,41,41,49,44,40,41,39,46,43,42,49,44,40,41,39,46,43,42,39,40,41,43,40,41,43,41,41,40,39,39,41,44,39,42,44,41,40,41,43,41,39,39,40,41,41,41,41,41,39,46,43,42,49,44,40,40,41,39,46,43,42,41,41,41,41,41,41,39,41,41,41,49,44,40,41,39,46,43,42,49,41,41,41,41,42,41,44,39,42,49,41,39,44,39,42,40,41,39,39,41,39,39,39,39,44,39,39,44,39,42,40,40,41,41,41,40,41,43,41,49,44,40,41,39,46,43,42,49,44,40,41,39,46,43,42,49,44,40,41,39,46,43,42,41,39,39,39,42,44,39,42,44,39,42,44,39,42,54,54],"f":[0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[1,[-1,-2]],-3],[],2,2,[[3,[[1,[-1,-2]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[[5,[4]]]]],[]],[[-1,-2],[[6,[[5,[4]],-2]]],[],7],[[-1,-2],[[6,[[5,[4]],-2]]],[],7],0,0,[[[5,[4]]],8],[8],[[4,9],10],[8,[[5,[4]]]],[[-1,-2],[],[],[]],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,[-1,9,[]],[[[1,[-1,-2]]],9,2,2],[[-1,[13,[4]]],14,[]],[[[1,[-1,-2]],[13,[4]]],14,2,2],[[-1,[13,[4]],9],14,[]],[[[1,[-1,-2]],[13,[4]],9],14,2,2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,15,16],[[-1,9],15,16],[-1,-1,[]],[-1,-2,[],[]],[15,[[18,[17]]]],[[[5,[15]]],[[18,[17]]]],[19,20],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,21],[22,22],[23,23],[24,24],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[21,21],25],[[],21],[26,27],[28,21],[26,21],0,[[28,-1],[],[[3,[28]]]],[[29,-1],[],[[3,[29]]]],[[26,-1],[],[[3,[26]]]],[[21,21],30],[[22,22],30],[[31,31],30],[[24,24],30],0,[[21,32],33],[[21,32],33],[[22,32],33],[[31,32],33],[[23,32],33],[[24,32],33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[21,-1],14,34],0,[26,23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[6,[[5,[4]],-2]]],[],7],[[-1,-2],[[6,[[5,[4]],-2]]],[],7],[[-1,-2],[[6,[[5,[4]],-2]]],[],7],[31,27],[31,21],[[21,21,22],28],[[17,22],29],[[23,22,31,31,24],26],[[21,27],31],[26,24],[[4,9],10],[[4,9],10],[[4,9],10],[[21,21],[[35,[25]]]],0,[26,22],[[28,21],28],[[28,21],28],[26,27],[28,21],[26,21],0,[[28,-1],[],2],[[29,-1],[],2],[[26,-1],[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[28,22],0,[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[28,9],[29,9],[26,9],[[28,[13,[4]]],14],[[29,[13,[4]]],14],[[26,[13,[4]]],14],[[28,[13,[4]],9],14],[[29,[13,[4]],9],14],[[26,[13,[4]],9],14],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[37,37],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[27,27],25],[[],27],[19,27],[[19,-1],[],[[3,[19]]]],[[27,27],30],[[37,37],30],[[27,32],33],[[27,32],33],[[37,32],33],[[19,32],33],0,[-1,-1,[]],[[[38,[4]]],27],[-1,-1,[]],[-1,-1,[]],[[27,-1],14,34],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[6,[[5,[4]],-2]]],[],7],[27,30],[[27,27,27],30],[[4,4,4,4],27],[[27,27,37],19],[27,[[38,[4]]]],[[4,9],10],[[27,27],[[35,[25]]]],[19,17],[19,37],[[19,27],19],[19,27],[[19,-1],[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],0,[-1,12,[]],[-1,12,[]],[-1,12,[]],0,[19,9],[[19,[13,[4]]],14],[[19,[13,[4]],9],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[39,40],[[40,15],40],[[40,40],40],[[],41],[42,[[5,[4]]]],[[41,41],41],[[41,41],14],[[41,41],41],[[41,41],14],[41,17],[41,17],[[41,41],41],[[41,41],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[40,40],[41,41],[43,43],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[41,41],[[41,41],30],[[],40],[39,17],0,[[41,41],41],[[44,-1],[],[[3,[44]]]],[[39,-1],[],[[3,[39]]]],[[42,-1],[],[[3,[42]]]],[44,17],[[],41],[[40,40],30],[[41,41],30],[[43,43],30],[[41,-1],14,45],[39,41],0,[[40,32],33],[[41,32],33],[[41,32],33],[[41,32],33],[[41,32],33],[[41,32],33],[[39,32],33],[[46,32],33],[[43,32],33],[[42,32],33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[15,40],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[17,[[35,[41]]]],[17,41],[17,41],[17,41],[-1,41,45],[47,[[35,[41]]]],[39,4],[[41,41],14],[[41,41],41],[[41,41],30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[41],[41,30],[41,30],[41,[[48,[41]]]],[42,49],[41,[[50,[41]]]],[[17,17],44],[[17,17],39],[[],42],[49,35],[41,41],[39,4],[[4,9],10],[[4,9],10],[[4,9],[[10,[42]]]],[[40,40],[[35,[25]]]],[[41,41],14],0,[39,40],[[41,41,30],14],[[39,40],39],[[39,41],39],[[39,40],39],[[39,17],39],[44,17],[39,17],0,[[44,-1],[],[[51,[19]]]],[[39,-1],[],[[51,[19]]]],[[42,-1],[],[[51,[39]]]],[[40,15],40],[[40,40],40],[[41,41],41],[[41,41],14],[[41,41],41],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[41,41],14],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[[41,41],41],0,[39,17],0,[[42,43],42],[44,9],[39,9],[42,9],[[44,[13,[4]]],14],[[39,[13,[4]]],14],[[42,[13,[4]]],14],[[44,[13,[4]],9],14],[[39,[13,[4]],9],14],[[42,[13,[4]],9],14],0,0],"c":[],"p":[[3,"Stacked",0],[8,"Protocol",0],[8,"Stack",0],[15,"u8"],[15,"slice"],[3,"Box",474],[8,"Allocator",475],[3,"PacketParser",0],[15,"usize"],[3,"Parsed",0],[4,"Result",476],[3,"TypeId",477],[3,"NonNull",478],[15,"tuple"],[15,"u32"],[8,"Sized",479],[15,"u16"],[3,"BigEndian",480],[3,"Ipv4",211],[3,"PseudoHeader",54],[3,"MacAddr",67],[4,"EthType",67],[4,"ArpHardwareType",67],[4,"ArpOpcode",67],[4,"Ordering",481],[3,"Arp",67],[3,"Ipv4Addr",211],[3,"Eth",67],[3,"Tun",67],[15,"bool"],[3,"ArpAddress",67],[3,"Formatter",482],[6,"Result",482],[8,"Hasher",483],[4,"Option",484],[3,"String",485],[4,"Ipv4Type",211],[15,"array"],[3,"Tcp",281],[3,"SeqNumber",281],[3,"TcpFlags",281],[3,"TcpOptions",281],[4,"TcpOption",281],[3,"Udp",281],[8,"IntoIterator",486],[4,"TcpOptionErr",281],[15,"str"],[3,"Iter",487],[3,"TcpOptionsIter",281],[3,"IterNames",487],[8,"StackingAnchor",0],[8,"Parsable",0],[8,"IntoBoxedBytes",0],[13,"UnknownOption",472]]},\
"static_assertions":{"doc":"Banner","t":"OOOOOOOOOOOOOOOOOOO","n":["assert_cfg","assert_eq_align","assert_eq_size","assert_eq_size_ptr","assert_eq_size_val","assert_fields","assert_impl_all","assert_impl_any","assert_impl_one","assert_not_impl_all","assert_not_impl_any","assert_obj_safe","assert_trait_sub_all","assert_trait_super_all","assert_type_eq_all","assert_type_ne_all","const_assert","const_assert_eq","const_assert_ne"],"q":[[0,"static_assertions"]],"d":["Asserts that a given configuration is set.","Asserts that types are equal in alignment.","Asserts that types are equal in size.","Asserts that values pointed to are equal in size.","Asserts that values are equal in size.","Asserts that the type has the given fields.","Asserts that the type implements <em>all</em> of the given traits.","Asserts that the type implements <em>any</em> of the given traits.","Asserts that the type implements exactly one in a set of …","Asserts that the type does <strong>not</strong> implement <em>all</em> of the given …","Asserts that the type does <strong>not</strong> implement <em>any</em> of the given …","Asserts that the traits support dynamic dispatch (…","Asserts that the trait is a child of all of the other …","Asserts that the trait is a parent of all of the other …","Asserts that <em>all</em> types in a list are equal to each other.","Asserts that <em>all</em> types are <strong>not</strong> equal to each other.","Asserts that constant expressions evaluate to <code>true</code>.","Asserts that constants are equal in value.","Asserts that constants are <strong>not</strong> equal in value."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
